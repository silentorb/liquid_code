// Generated by CoffeeScript 1.3.3
(function() {
  var JavaScript, PHP, Parser, fs, liquid_module, load_file;

  require('coffee-trace');

  liquid_module = require('../liquid.js');

  Parser = liquid_module.Parser;

  PHP = liquid_module.PHP;

  JavaScript = liquid_module.JavaScript;

  fs = require('fs');

  load_file = function(filename) {
    var text;
    text = fs.readFileSync(filename, 'ascii');
    return text.replace(/\r?\n/g, "\n");
  };

  module.exports = {
    setUp: function(callback) {
      this.foo = "bar";
      return callback();
    },
    tearDown: function(callback) {
      return callback();
    },
    test_find_scope: function(test) {
      var range;
      range = Parser.find_scope('f(){ { } } {}', '{', '}', '{|}');
      test.equals(range[0], 3);
      test.equals(range[1], 10);
      return test.done();
    },
    test_locate_functions: function(test) {
      var code, furnace, range, scopes;
      code = load_file('./test/php_samples/simple_function.php');
      range = Parser.find_scope(code, '{', '}', '{|}');
      test.equals(range[0], 30);
      test.equals(range[1], 74);
      furnace = PHP.create();
      scopes = furnace.locate_functions(code);
      test.equals(scopes.length, 1);
      test.equals(scopes[0].range[0], 30);
      test.equals(scopes[0].range[1], 74);
      return test.done();
    },
    test_variables: function(test) {
      var code, furnace, scope;
      code = load_file('./test/php_samples/variables.php');
      furnace = PHP.create();
      scope = furnace.locate_functions(code)[0];
      furnace.find_variables(scope);
      test.equals(scope.variables.length, 1);
      return test.done();
    },
    test_full_convert: function(test) {
      var code, furnace, ice, liquid;
      code = load_file('./test/php_samples/full_test.php');
      furnace = PHP.create();
      ice = JavaScript.create();
      liquid = furnace.liquify(code);
      code = ice.solidify(liquid);
      fs.writeFileSync('./test/output/result.js', code, 'ascii');
      return test.done();
    }
  };

}).call(this);
