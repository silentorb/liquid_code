start = 
space* ("<" "?php" space*)? code:code_with_spaces* (space* "?>")? space*
{
  return new Code(code);
}

arguments = space* "(" first:expression? others:(space* ',' expression)* ")" space*
{
  expressions = [];
  if (typeof first !== 'undefined') {
    others = others.map(function(x) { return x[x.length - 1]; });
    expressions = [ first ].concat(others);
  }

  return new Arguments(expressions);
}

key_value = space* key:expression space* "=>" space* value:expression space* ","? space*
{
  return new Key_Value(key, value);
}

associative_array =
space* "array" space* "("
items:(key_value)+
")" space*
{
  return new Associative_Array_Definition(items);
}

attribute = 
("public" / "private" / "protected" / "static" / space+)

// Don't put the space rule in front of block or it will throw off
// block_simple
block =
block_braces / block_simple

block_braces =
space* "{" space* code:code_with_spaces* "}" space*
{
  return new Block(code);
}

block_simple =
' '* '\n' ' '* code:code
{
  return new Block(code);
}

code = 
  function_definition
/ comment
/ statement
/ class_definition
/ expression terminator
/ terminator

code_with_spaces =
  code
/ space+

code_with_meat = 
  code code_with_spaces*

comment = comment_line / comment_block

comment_line = space* "//" text:[^\n]* space*
{
  return new Comment(compress(text), 0);
}

comment_block = space* "/*"  text:(! "*/".)+ "*/" space*
{
  return new Comment(compress(text), 1);
}

conversion =
space* "(" space* type:value_type space* ")" space* expression:expression2
{
  return new Conversion(type, expression);
}

exception_raise = 
"throw" expression:expression terminator
{
  return new Exception_Raise(expression);
}

expression =
  expression_list
/ expression2

expression2 = 
space* negate:("!" !"=" space*)? expression:(
  conversion
/ associative_array
/ instantiate_class
/ invoke_static_member
/ invoke_variable_function
/ "new" invoke_variable_function
/ variable
/ create_array
/ modifier
/ invoke_function
/ static_value
/ comment
) space*
{
  return new Expression(expression, negate);
}

static_value =
  value
/ regex
/ string
/ number

expression_list = first:expression2
others:(space* op:operator exp:expression2 { return [ op, exp ]; })+ space*
{
  var total = [first]
  for(var i = 0; i < others.length; ++i) {
    total = total.concat(others[i]);
  }
//  console.log(others);
  return new Expression_List(total);
}

space = [ \n]
espace = [ \n] { return ''; }

class_block = space* "{" space*
code:(
  method_definition
/ comment
/ property
/ ';'
/ space+
)*
space* "}" space*
{
  return new Class_Block(code);
}

class_definition = "class" space+ name:non_keyword 
parent:(space+ "extends" space+ parent:non_keyword { return parent; })? block:class_block
{
  
  return new Class_Definition(compress(name), parent, block);
}

command =
name:("break" / "return" / "echo" / "print" / "throw" / "global" / "continue")
expression:(space+ expression:expression { return expression; })? space* terminator
{
  return new Command(name, expression);
}

create_array = space* "array" arguments:arguments space*
{
  return new Create_Array(arguments);
}

foreach =
"foreach" space*
"(" space* object:variable space+ "as" space+ key:("$" key:word space* "=>" space* { return key; })? value:variable space* ")"
block:block
{
  return new Foreach_Object(object, key, value, block);
}

function_definition = "function" space+ name:non_keyword parameters:parameters block:block
{
  return new Function_Definition(compress(name), parameters, block);
}

// The most tricky rule in this grammar.
heredoc =
space* "<<<" (label1:word "\n" { Parser.label = label1; return label1; })
text:(label2:(word / variable / .) ! { return label2 == Parser.label; })+
word space*
{
  text = text.map(function(x) { return x[0]});
  return new Literal_String(text, 'heredoc', Parser.label);
}

instantiate_class =
space* "new" space+ name:non_keyword arguments:arguments space*
{
  return new Instantiate_Class(name, arguments);
}

invoke_function = space* name:non_keyword arguments:arguments space*
{
  return new Invoke_Function(compress(name), arguments);
}

invoke_method = object:variable "->" method:invoke_function
{
  return new Invoke_Method(object, method);
}

invoke_static_member = class_name:word "::" target:(variable / invoke_function)
{
  return new Invoke_Static_Member(class_name, target);
}

invoke_variable_function = space* variable:variable arguments:arguments space*
{
  return new Invoke_Variable_Function(variable, arguments);
}

method_definition = attribute* "function" space+ name:non_keyword parameters:parameters block:block
{
  name = compress(name);
  var constructor = (name == '__construct');
  return new Method_Definition(name, parameters, block, constructor);
}

number = number:('-'? space* [0-9.]+)
{
  return compress(number);
}

default_value = space* "=" space* default_value:expression
{
  return compress(default_value);
}

parameter = "&"? "$" name:word default_value:default_value?
{
  if (typeof default_value === 'undefined')
    default_value = '';

  return new Parameter(compress(name), default_value);
}

parameters = space* "(" first:parameter? others:(space* ',' space* parameter)* ")" space*
{
  parameters = [];
  if (typeof first !== 'undefined') {
    others = others.map(function(x) { return x[x.length - 1]; });
    parameters = [ first ].concat(others);
  }

  return new Parameters(parameters);
}
property =
attribute+ name:variable value:(space* "=" space* expression+)? terminator
{
  value = value[value.length - 1];
  return new Property(name, value);
}

statement = 
  ("return" space+ exp:expression? terminator) { return new Expression_List([ "return", exp ]); }
/ do_while
/ control_no_parameters
/ control_with_parameters
/ command
/ foreach
/ switch

control_no_parameters =
space*
name:("else" / "try") block:block
space*
{
  return new Control(name, null, block);
}

do_while =
space* "do" block:block
"while" space* "(" expression:expression ")" terminator
{
  return new Control('do', expression, block);
}

control_with_parameters =
space*
name:(keyword_with_parameter) space* "(" (space* "Exception" space+)? condition:expression+ ")" block:block
space*
{
  return new Control(name, condition, block);
}

keyword_with_parameter = 
"if" / "else if" / "while" / "catch"

string = single_quote / double_quote / heredoc
single_quote = "'" text:[^']* "'"
{ 
  return new Literal_String(compress(text), 'single');
}

double_quote = '"' text:[^"]* '"'
{ 
  return new Literal_String(compress(text), 'double');
}

regex =
  '"/' text:(x:('/"' / '\\"' / .) &{ return x != '/"' && x != '"'; })* '/"'
/ "'/" text:(x:("/'" / "\\'" / .) &{ return x != "/'" && x != "'"; })* "/'"
{
  return new Regex(compress(text));
}

value = 
"true"i / "false"i
/ "null"i
/ value_type

value_type = "bool"i / "int"i / "float"i / "string"i / "object"i / "array"i

assignment = 
variable:variable space* assignment_operator space* expression:expression
{
  if (variable.index == '[]')
    return new Array_Append(variable, expression);
  else
    return new Assignment(variable, expression);
}

assignment_operator ="=" / ".=" / "+=" / "-=" / "*=" / "/="

modifier_operators = "--" / "++"

modifier = 
(modifier_operators variable) /
(variable modifier_operators)

non_keyword = 
!keyword_with_parameter word:word { return word; }

operator =
  symbol:(
  comparison_operator
/ assignment_operator
/ action_operator)
{
  if (symbol == '.')
    symbol = '+';

  return new Operator(symbol);
}
  
comparison_operator = 
"===" / "==" / "!==" / "!=" /
"&&" / "||" /
">" / "<" / "<=" / ">="

action_operator = 
"+" / "-" / "." / "/" / "*"

comparison =
expression2 space* comparison_operator space* expression

switch =
space* "switch" space* "(" space* variable:variable space* ")" space* "{" space*
cases:(
space* "case" space* "("? space* value:static_value space* ")"?
space* ":" space* code:code*
{ return new Case_Statement(value, code); }
)*
default_case:("default" space* ":" space* code:code { return code; })?
space* "}" space*
{
  return new Switch_Statement(variable, cases, default_case);
}

terminator = space* ';' space*
{
  return new Terminator();
}

word = word:[A-Za-z0-1_]+
{
  return word.join('');
}

variable_base = root:word
children:('->' word:word !(space* "(") { return word; })*
{
  return new Variable(root, children, '');
}

array_index = (" "* "[" space* expression:expression space* "]" { return expression; })
array_index_multiple = expression:array_index+ { return expression; }
variable_base = root:word
options:(
  append:(" "* "[" space* "]" space* "=" space* expression:expression { return expression; })
  {     
    return { append: append, index: null, object_index: null, child: null }; 
  }
  /
  index: array_index_multiple?
  object_index:("->" "{"? space* variable:variable space* "}"? { return variable; })?
  child:('->' child:(invoke_function / variable_base) { return child; })?
  { 
    if (typeof child == 'undefined') child = null;
    if (typeof index == 'undefined') index = null;
    if (typeof object_index == 'undefined') object_index = null;
    return { append: null, index: index, object_index: object_index, child: child }; 
  }
)
{
//  console.log('var', root, options);
  var child = options.child, append = options.append, index = options.index;
  var result = new Variable(root, '', index);
  if (child) {
    child.root = result;
    result = child;
  }
  if (index) {
    result.index = index;
  }
  if (options.object_index) {
    result.object_index = options.object_index;
  }
  if (append) {
    result.append = append;
  }

  return result;
}

variable = "$" variable:variable_base
{
  return variable;
}