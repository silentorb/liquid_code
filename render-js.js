// Generated by CoffeeScript 1.3.3
var MetaHub;

MetaHub = require("../bloom/lib/metahub.js");

MetaHub.node_module(module, function() {
  var Ice, JavaScript;
  Ice = MetaHub.Meta_Object.subclass("Ice", {
    render: function(liquid) {}
  });
  return JavaScript = Ice.subclass("JavaScript", {
    depth: 0,
    indent_amount: 2,
    indent: function() {
      var result, x;
      result = "";
      x = 0;
      while (x < this.indent_amount * this.depth) {
        result += " ";
        ++x;
      }
      return result;
    },
    render: function(liquid) {
      var type;
      if (liquid === null || liquid === undefined) {
        return;
      }
      if (liquid.type) {
        type = this.classes[liquid.type];
        if (type) {
          console.log(this.indent() + liquid.type);
          return type.call(this, liquid);
        }
      } else if (typeof liquid !== "string" && liquid.length > 0) {
        return this.render_elements(liquid);
      } else {
        return liquid;
      }
    },
    render_elements: function(tokens) {
      var result, text, token, _i, _len;
      result = '';
      for (_i = 0, _len = tokens.length; _i < _len; _i++) {
        token = tokens[_i];
        text = this.render(token);
        if (text !== undefined && text !== null) {
          result += text;
        }
      }
      return result;
    },
    classes: {
      "arguments": function(element) {
        var expressions,
          _this = this;
        if (!element.expressions || element.expressions.length < 1) {
          return '';
        }
        expressions = element.expressions.map(function(expression) {
          return _this.render(expression);
        });
        return expressions.join(", ");
      },
      block: function(element) {
        var result;
        ++this.depth;
        result = " {\n" + this.indent() + this.render_elements(element.elements) + "\n}\n";
        --this.depth;
        return result;
      },
      class_block: function(element) {
        var elements,
          _this = this;
        ++this.depth;
        elements = element.elements.filter(function(element) {
          return element.type;
        });
        elements = elements.map(function(element) {
          return _this.render(element).trim();
        });
        --this.depth;
        return elements.join(",\n");
      },
      class_definition: function(element) {
        var parent;
        console.log('***');
        parent = element.parent || 'Meta_Object';
        return "var " + element.name + " = " + parent + ".subclass('" + element.name + "'," + this.render(element.block) + ");";
      },
      code: function(element) {
        return this.render_elements(element.elements);
      },
      control: function(element) {
        var text;
        text = element.name;
        if (element.condition) {
          text += " (" + this.render(element.condition) + ")";
        }
        return text + this.render(element.body);
      },
      function_definition: function(element) {
        return "function " + element.name + "(" + this.render(element.parameters) + ")" + this.render(element.block);
      },
      invoke_function: function(element) {
        var args;
        if (element["arguments"] && element["arguments"].length > 0) {
          args = this.render(element["arguments"]);
        } else {
          args = '';
        }
        return element.name + "(" + args + ")";
      },
      literal_string: function(element) {
        return "'" + element.text + "'";
      },
      method_definition: function(element) {
        var name;
        if (element.constructor) {
          name = 'initialize';
        } else {
          name = element.name;
        }
        return name + ": function" + "(" + this.render(element.parameters) + ")" + this.render(element.block);
      },
      parameter: function(element) {
        return element.name;
      },
      parameters: function(element) {
        var variables,
          _this = this;
        if (!element.variables || element.variables.length < 1) {
          return '';
        }
        variables = element.variables.map(function(variable) {
          return _this.render(variable);
        });
        return variables.join(", ");
      },
      property: function(element) {
        var value;
        value = element.value || "''";
        return this.render(element.variable) + ': ' + this.render(value);
      },
      variable: function(element) {
        return element.name + element.children.replace(/\->/g, ".") + element.index;
      }
    }
  });
});
